package no.ssb.rawdata.api;

import de.huxhorn.sulky.ulid.ULID;

import java.util.Set;

public interface RawdataMessage {

    /**
     * A unique lexicographically sortable identifier for the message. Sorting by this id, will also sort the messages
     * by time, making it convenient
     *
     * @return
     */
    ULID.Value ulid();

    /**
     * Timestamp represented as milliseconds since 1/1-1970. This is derived from the ulid.
     *
     * @return
     */
    default long timestamp() {
        return ulid().timestamp();
    }

    /**
     * A sequence-number (greater-than 0) within the stream, or 0 if the stream already guarantees ordering.
     * <p>
     * These sequence numbers are based on a counter that starts at 1 and increases by 1 for each message in the ordered
     * stream. Because there will be no gaps in this sequence, it's possible for the consumer to re-order the messages
     * in a timely manner when using streaming technology where ordering is not guaranteed, but a best-effort thing.
     *
     * @return the sequence number
     */
    long sequenceNumber();

    /**
     * The original external identifier for the streaming element. Typically the one used by the stream source system.
     * This identifier does not need to be sortable.
     *
     * @return the position
     */
    String position();

    /**
     * A set of content-keys for this message. Use the get() method to get the corresponding content-value.
     *
     * @return the content-keys
     */
    Set<String> keys();

    /**
     * Get the content for a given key.
     *
     * @param key the content-key
     * @return the raw bytes of the content
     */
    byte[] get(String key);

    /**
     * Builder used to build messages.
     */
    interface Builder {

        /**
         * Set ulid value of this message. If not supplied, one will be generated by the publisher at publication time.
         * If the sequence-number is not used (value of 0), the ulid value must be strictly monotonically increasing
         * from one message to the next message in a stream in order to preserve the correct order of messages. If the
         * sequence-number is used, then the ulid value sequencing can be done in a best-effort manner.
         *
         * @param ulid
         * @return this builder
         */
        Builder ulid(ULID.Value ulid);

        /**
         * The external identifier of the element in the stream.
         *
         * @param position
         * @return this builder
         */
        Builder position(String position);

        /**
         * Assign binary content to a named key.
         *
         * @param key     the named key
         * @param payload the content
         * @return this builder
         */
        Builder put(String key, byte[] payload);

        /**
         * Build a message by the properties defined through previous calls to this builder. If some requirements are
         * missing, this call will throw a runtime-exception.
         *
         * @return the message
         */
        RawdataMessage build();
    }
}
